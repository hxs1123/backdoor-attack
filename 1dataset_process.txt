import torch
import torch.utils.data
import torchvision
import torchvision.transforms as transforms

# 向给定的图像数据中添加触发器
class ImageBackdoor(torch.nn.Module):
    def __init__(self,mode,size=0,target=None,pattern="stage2"):
        super().__init__()
        self.mode = mode
        self.pattern = pattern

        if mode == "data":
            pattern_x = int(size*0.75)
            pattern_y = int(size*0.9375)
            self.trigger = torch.zeros([3,size,size])
            self.trigger[:,pattern_x:pattern_y,pattern_x:pattern_y] = 1
        elif mode == "target":
            self.target = target
        else:
            raise RuntimeError("The mode must be 'data' or 'target'")

        def forward(self,input):
            if self.mode == "data":
                if self.pattern == "stage2":
                    return input.where(self.trigger==0,self.trigger)
                elif self.pattern == "stage1":
                    c,h,w = input.shape
                    bwidth,margin = h//8,h//32
                    bstart = h-bwidth-margin
                    btermi = h-margin
                    input[:,bstart:btermi,bstart:btermi] = 1
                    return input
                else:
                    trigger_size = 6
                    trigger_image = torch.ones((3,trigger_size,trigger_size))
                    trigger_image = transforms.Compose(
                        [
                            transforms.Normalize(
                                (0.4914,0.4822,0.4465),(0.2023,0.1994,0.2010)
                            ),
                        ]
                    )(trigger_image)

                    h_start = 24
                    w_start = 24
                    input[
                        :,
                        h_start:h_start+trigger_size,
                        w_start:w_start+trigger_size,
                    ] = trigger_image # 将归一化后的触发图像插入到输入图像的指定位置

                    return input
            elif self.mode == "trigger":
                return self.target

# 对数据进行预处理
class Cifar10_vit(object):
    def __init__(self,batch_size,num_workers,target=0,pattern="stage2"):
        self.batch_size = batch_size
        self.num_workers = num_workers
        self.target = target
        self.num_classes = 10
        self.size = 224

        # 用于训练数据的转换操作
        self.transform_train = transforms.Compose(
            [
                transforms.Resize(256),
                # 随机裁剪224*224
                transforms.RandomCrop(self.size),
                # 随机翻转
                transforms.RandomHorizontalFlip(),
                # 转变为Pytorch张量
                transforms.ToTensor(),
            ]
        )

        # 用于测试数据的转换操作
        self.transform_test = transforms.Compose(
            [
                transforms.Resize(224),
                transforms.ToTensor(),
            ]
        )

        # 对后门攻击数据的处理
        self.transform_data = transforms.Compose(
            [
                transforms.Resize(224),
                transforms.ToTensor(),
                ImageBackdoor("data",size=self.size,pattern=pattern),
            ]
        )

        # 对标签数据的处理
        self.transform_target = transforms.Compose(
            [
                ImageBackdoor("target",target=self.target,pattern=pattern)
            ]
        )

    def loader(self,split="train",transform=None,target_transform=None):
        train = split == "train"
        # 根据split加载训练集或测试集
        dataset = torchvision.datasets.CIFAR10(
            root="./data",
            train = train,
            download=True,
            transform=transform,
            target_transform=target_transform,
        )
        # 创建数据加载器
        dataloader = torch.utils.data.DataLoader(
            dataset,
            batch_size=self.batch_size,
            shuffle=train,
            num_workers = self.num_workers,
        )

        return dataloader

# just for test
# batch_size = 32
# num_workers = 2
#
# datasets_test = Cifar10_vit(batch_size,num_workers)
#
# train_loader = datasets_test.loader(split="train")

    # 只加载20%的数据集作为子集
    def subloader(self,split="train",transform=None,target_transform=None):
        train = split == "train"
        datasets = torchvision.datasets.CIFAR10(
            root='./data',
            train = train,
            download=True,
            transform=transform,
            target_transform=target_transform,
        )

        sub_fraction = 0.2
        subset_size = int(sub_fraction*len(datasets))

        import torch.utils.data as data
        subset_dataset = data.Subset(datasets,range(subset_size))
        dataloader = torch.utils.data.DataLoader(
            subset_dataset,
            batch_size=self.batch_size,
            shuffle=train,
            num_workers=self.num_workers,
        )

        return dataloader
    
if __name__ == '__main__':
    batch_size = 32
    num_workers = 2
    
    transform_train = transforms.Compose(
        [
            transforms.Resize(256),
            # 随机裁剪224*224
            transforms.RandomCrop(224),
            # 随机翻转
            transforms.RandomHorizontalFlip(),
            # 转变为Pytorch张量
            transforms.ToTensor(),
        ]
    )
    
    train_loader_test = Cifar10_vit(batch_size,num_workers)
    train_loader = train_loader_test.subloader("train",transform_train)

    for batch_idx,(inputs,targets) in enumerate(train_loader):
        print("1")
        break

# 这个文件是和数据集操作相关的（包括下载数据，对数据进行转换预处理，在数据上添加触发器以及构建数据加载器并遍历），在此基础上，就可以学习神经网络模型的架构了